AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

# Package:
#   exclude:
#     - node_modules/**

Resources:
  # LambdaRequestAuthFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: src/handlers/authorizer.handler
  #     Timeout: 30
  #     Runtime: nodejs16.x
  #     # CodeUri: ./
  #     Policies:
  #       - AWSLambda_FullAccess
  #       - CloudWatchLogsFullAccess
  MyWebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: MyWebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  # TestHandlerFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: src/handlers/test-handler.testHandler
  #     Timeout: 30
  #     Runtime: nodejs16.x
  #     # CodeUri: ./
  #     Policies:
  #       - AWSLambda_FullAccess
  #       - CloudWatchLogsFullAccess
  #       - AmazonAPIGatewayInvokeFullAccess
  #       - AmazonAPIGatewayAdministrator

  # Dependencies:
  #   Type: AWS::Serverless::LayerVersion
  #   Properties:
  #     LayerName: NodeDependencies
  #     Description: Dependencies
  #     ContentUri: ./*.json
  #     CompatibleRuntimes:
  #       - nodejs16.x
  #     RetentionPolicy: Retain
  #   Metadata:
  #     BuildMethod: nodejs16.x

  ConnectionHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/connection-handler.connectionHandler
      Timeout: 30
      Runtime: nodejs16.x
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          CONNECTIONS_TABLE: !Ref ConnectionsTable
      # CodeUri: ./
      Policies:
        - AWSLambda_FullAccess
        - CloudWatchLogsFullAccess
        - AmazonAPIGatewayInvokeFullAccess
        - AmazonAPIGatewayAdministrator
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable

  OverlayIdCheckerHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/overlay-id-checker-handler.overlayIdCheckerHandler
      Timeout: 30
      Runtime: nodejs16.x
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          CONNECTIONS_TABLE: !Ref ConnectionsTable
          OVERLAY_TABLE: !Ref OverlayTable
      # CodeUri: ./
      Policies:
        - AWSLambda_FullAccess
        - CloudWatchLogsFullAccess
        - AmazonAPIGatewayInvokeFullAccess
        - AmazonAPIGatewayAdministrator
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref OverlayTable

  OverlayHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/overlay-handler.overlayHandler
      Timeout: 30
      Runtime: nodejs16.x
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          CONNECTIONS_TABLE: !Ref ConnectionsTable
          OVERLAY_TABLE: !Ref OverlayTable
      # CodeUri: ./
      Policies:
        - AWSLambda_FullAccess
        - CloudWatchLogsFullAccess
        - AmazonAPIGatewayInvokeFullAccess
        - AmazonAPIGatewayAdministrator
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref OverlayTable

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref MyWebSocketApi
      RouteKey: "$connect"
      OperationName: ConnectRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref ConnectLambdaIntegration

  ConnectLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MyWebSocketApi
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectionHandlerFunction.Arn}/invocations

  TestRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref MyWebSocketApi
      RouteKey: "test"
      OperationName: TestRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref TestLambdaIntegration

  TestLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MyWebSocketApi
      Description: Test Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OverlayIdCheckerHandlerFunction.Arn}/invocations

  CheckOverlayCookieIdRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref MyWebSocketApi
      RouteKey: "checkOverlayCookieId"
      OperationName: CheckOverlayCookieIdRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref CheckOverlayCookieIdLambdaIntegration

  CheckOverlayCookieIdLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MyWebSocketApi
      Description: CheckOverlayCookieId Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OverlayIdCheckerHandlerFunction.Arn}/invocations

  GetOverlaysRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref MyWebSocketApi
      RouteKey: "getOverlays"
      OperationName: GetOverlaysRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref OverlayHandlerLambdaIntegration

  OverlayHandlerLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MyWebSocketApi
      Description: OverlayHandler Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OverlayHandlerFunction.Arn}/invocations

  AddOverlayRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref MyWebSocketApi
      RouteKey: "addOverlay"
      OperationName: AddOverlayRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref OverlayHandlerLambdaIntegration

  GetOverlayContentRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref MyWebSocketApi
      RouteKey: "getOverlayContent"
      OperationName: GetOverlayContentRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref OverlayHandlerLambdaIntegration

  # OverlayHandlerLambdaIntegration:
  #   Type: AWS::ApiGatewayV2::Integration
  #   Properties:
  #     ApiId: !Ref MyWebSocketApi
  #     Description: OverlayHandler Integration
  #     IntegrationType: AWS_PROXY
  #     IntegrationUri:
  #       Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OverlayHandlerFunction.Arn}/invocations

  # Auth:
  #   Type: "AWS::ApiGatewayV2::Authorizer"
  #   Properties:
  #     Name: My-Authorizer
  #     ApiId: !Ref MyWebSocketApi
  #     AuthorizerType: REQUEST
  #     AuthorizerUri:
  #       Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaRequestAuthFunction.Arn}/invocations
  #     IdentitySource:
  #       - "route.request.header.x-some-header-to-auth-from"

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: v1
      Description: Version 1 'stage'
      DeploymentId: !Ref Deployment
      ApiId: !Ref MyWebSocketApi

  ConnectionHandlerFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MyWebSocketApi
      - ConnectionHandlerFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ConnectionHandlerFunction
      Principal: apigateway.amazonaws.com

  OverlayIdCheckerHandlerFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MyWebSocketApi
      - OverlayIdCheckerHandlerFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OverlayIdCheckerHandlerFunction
      Principal: apigateway.amazonaws.com

  OverlayHandlerFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MyWebSocketApi
      - OverlayHandlerFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OverlayHandlerFunction
      Principal: apigateway.amazonaws.com

  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ConnectionsTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  OverlayTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: OverlayTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - TestRoute
      - CheckOverlayCookieIdRoute
      - GetOverlaysRoute
      - AddOverlayRoute
      - GetOverlayContentRoute
      - ConnectRoute
    Properties:
      ApiId: !Ref MyWebSocketApi
  # AuthorizerFunctionPermission:
  #   Type: AWS::Lambda::Permission
  #   DependsOn:
  #     - MyWebSocketApi
  #     - LambdaRequestAuthFunction
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !Ref LambdaRequestAuthFunction
  #     Principal: apigateway.amazonaws.com
